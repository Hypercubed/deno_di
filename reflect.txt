// Taken from https://github.com/abraham/reflection

export declare type Decorator = ClassDecorator | MemberDecorator;
export declare type MemberDecorator = <T>(
  target: Target,
  propertyKey: PropertyKey,
  descriptor?: TypedPropertyDescriptor<T>,
) => TypedPropertyDescriptor<T> | void;
export declare type MetadataKey = string | symbol;
export declare type PropertyKey = string | symbol;
export declare type Target = object | Function;

declare global {
  namespace Reflect {
    function defineMetadata<MetadataValue>(
      metadataKey: MetadataKey,
      metadataValue: MetadataValue,
      target: Target,
      propertyKey?: PropertyKey,
    ): void;
    function decorate(
      decorators: ClassDecorator[],
      target: Function,
    ): Function;
    function decorate(
      decorators: MemberDecorator[],
      target: object,
      propertyKey?: PropertyKey,
      attributes?: PropertyDescriptor,
    ): PropertyDescriptor | undefined;
    function metadata<MetadataValue>(
      metadataKey: MetadataKey,
      metadataValue: MetadataValue,
    ): (target: Target, propertyKey?: string | symbol | undefined) => void;
    function getMetadata<MetadataValue>(
      metadataKey: MetadataKey,
      target: Target,
      propertyKey?: PropertyKey,
    ): MetadataValue | undefined;
    function getOwnMetadata<MetadataValue>(
      metadataKey: MetadataKey,
      target: Target,
      propertyKey?: PropertyKey,
    ): MetadataValue | undefined;
    function hasOwnMetadata(
      metadataKey: MetadataKey,
      target: Target,
      propertyKey?: PropertyKey,
    ): boolean;
    function hasMetadata(
      metadataKey: MetadataKey,
      target: Target,
      propertyKey?: PropertyKey,
    ): boolean;
  }
}
